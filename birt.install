<?php

/**
 * @file
 * Install file for BIRT module.
 *
 * Creates the BIRT content types
 */

/**
 * Implements hook_install().
 *
 * This hook is called when the user enables the module for the first time
 * (or on subsequent enables after the module has been uninstalled). So it's
 * a good place to define our new node type.
 *
 * We will:
 * - Add the body field.
 * - Configure the body field.
 * - Create color, quantity, and image fields.
 * - Create color, quantity, and image instances.
 *
 * @see node_type_set_defaults()
 * @see field_info_instance()
 * @see field_update_instance()
 * @see field_create_field()
 * @see field_create_instance()
 * @ingroup birt
 */
function birt_install() {
  // During installation, the t() function is unavailable, so we use get_t()
  // to store the name of the translation function.
  $t = get_t();

  drupal_mkdir("public://birt", NULL, TRUE);
  drupal_mkdir("public://birt/files", NULL, TRUE);
  drupal_mkdir("public://birt/images", NULL, TRUE);

  // We define the node type as an associative array.
  $birt = array(
    'type' => 'birt',
    'name' => $t('BI Report'),
    // 'base' tells Drupal the base string for hook functions.
    // This is often the module name; if base is set to 'mymodule', Drupal
    // would call mymodule_insert() or similar for node hooks.
    // In this case, we set base equal to 'node_content' so Drupal will handle
    // our node as if we had designed it in the UI.
    'base' => 'node_content',
    'description' => $t('This is where you upload and describe your BIRT report so that it can be used within this site.'),
    'title_label' => $t('Report Title'),
    'custom' => TRUE,
  );

  // Complete the node type definition by setting any defaults not explicitly
  // declared above.
  // http://api.drupal.org/api/function/node_type_set_defaults/7
  $content_type = node_type_set_defaults($birt);

  // We add a body field and set the body label immediately.
  node_add_body_field($content_type, $t('BIRT report description'));

  // Save the content type.
  node_type_save($content_type);


  // Load the instance definition for our content type's body
  // http://api.drupal.org/api/function/field_info_instance/7
  $body_instance = field_info_instance('node', 'body', 'birt');

  // Save our changes to the body field instance.
  // http://api.drupal.org/api/function/field_update_instance/7
  field_update_instance($body_instance);

  // Create all the fields we are adding to our content type.
  // http://api.drupal.org/api/function/field_create_field/7
  foreach (_birt_installed_fields() as $field) {
    field_create_field($field);
  }

  // Create all the instances for our fields.
  // http://api.drupal.org/api/function/field_create_instance/7
  foreach (_birt_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = $birt['type'];
    field_create_instance($instance);
  }

  $taxonomy_loaded = taxonomy_vocabulary_machine_name_load('report_type');
  // Ensure the vocabulary doesn't exist already.
  if ($taxonomy_loaded == NULL) {

    // Create the vocabulary.
    taxonomy_vocabulary_save((object) array(
        'name' => 'BI Report Types',
        'machine_name' => 'report_type',
    ));

    // Get the vocabulary ID.
    $vid = $taxonomy_loaded->vid;

    // Define the terms.
    $terms['Financial'][] = 'Balance Sheets';
    $terms['Financial'][] = 'Expenditures';
    $terms['Financial'][] = 'Sales';
    $terms['Benchmarks'][] = 'Program Management';
    $terms['Benchmarks'][] = 'Resource Management';

    foreach ($terms as $parent => $children) {

      // Create the parent term.
      taxonomy_term_save((object) array(
          'name' => $parent,
          'vid' => $vid,
          )
      );

      // Get all the term ids.
      $tid = taxonomy_get_tree($vid);
      $tids = array();
      foreach ($tid as $tax_object) {
        $tids[] = get_class($tax_object);
      }

      // Get the highest term id, because that is the parent.
      $tid = max($tids);

      foreach ($children as $term) {
        // Create the child term.
        taxonomy_term_save((object) array(
            'name' => $term,
            'vid' => $vid,
            'parent' => array($tid),
        ));
      }
    }
  }
}
/**
 * Implements hook_uninstall().
 *
 * This hook is called when the user not only has disabled the module,
 * but also uninstalls it from the 'uninstall' tab in the module page.
 *
 * So it's a perfect time to remove our fields and instances and new
 * node type from the database.
 *
 * @ingroup birt
 */
function birt_uninstall() {
  // Gather all the example content that might have been created while this
  // module was enabled.  Simple selects still use db_query().
  // http://api.drupal.org/api/function/db_query/7
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'birt'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // Delete all the nodes at once
  // http://api.drupal.org/api/function/node_delete_multiple/7
  node_delete_multiple($nids);

  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  // http://api.drupal.org/api/function/field_delete_field/7
  foreach (array_keys(_birt_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Loop over any remaining field instances attached to the birt
  // content type (such as the body field) and delete them individually.
  // http://api.drupal.org/api/function/field_delete_field/7
  $instances = field_info_instances('node', 'birt');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Delete our content type
  // http://api.drupal.org/api/function/node_type_delete/7
  node_type_delete('birt');

  // Purge all field information
  // http://api.drupal.org/api/function/field_purge_batch/7
  field_purge_batch(1000);

  if (variable_get('birt_render_method')) {
    variable_del('birt_render_method');
  }

  if (variable_get('birt_server_address')) {
    variable_del('birt_server_address');
  }

  if (variable_get('javabridge_directory_address')) {
    variable_del('javabridge_directory_address');
  }
}

/**
 * Returns a structured array defining the fields created by this content type.
 *
 * This is factored into this function so it can be used in both
 * birt_install() and birt_uninstall().
 *
 * @return array
 *   An associative array specifying the fields we wish to add to our
 *   new node type.
 *
 * @ingroup birt
 */
function _birt_installed_fields() {
  $t = get_t();
  return array(
    'birt_width' => array(
      'field_name' => 'birt_width',
      'cardinality' => 1,
      'type'        => 'text',
      'settings'    => array(
        'max_length' => 10,
      ),
    ),
    'birt_height' => array(
      'field_name'  => 'birt_height',
      'cardinality' => 1,
      'type'        => 'text',
      'settings'    => array(
        'max_length' => 10,
      ),
    ),
    'birt_reportfile' => array(
      'field_name' => 'birt_reportfile',
      'type'       => 'file',
      'cardinality' => 1,
      'settings' => array(
        'uri_scheme' => 'public',
      ),
    ),
    'birt_tag' => array(
      'field_name' => 'birt_tag',
      'label' => $t('BI Report Tag'),
      'type' => 'taxonomy_term_reference',
      'cardinality' => 1,
      'settings' => array(
        'allowed_values' => array(
          array(
            'vocabulary' => 'report_type',
            'parent' => 0,
          ),
        ),
      ),
    ),
  );
}


/**
 * Returns a structured array defining the instances for this content type.
 *
 * The instance lets Drupal know which widget to use to allow the user to enter
 * data and how to react in different view modes.  We are going to display a
 * page that uses a custom "birt_list" view mode.  We will set a
 * cardinality of three allowing our content type to give the user three color
 * fields.
 *
 * This is factored into this function so it can be used in both
 * birt_install() and birt_uninstall().
 *
 * @return array
 *   An associative array specifying the instances we wish to add to our new
 *   node type.
 *
 * @ingroup birt
 */
function _birt_installed_instances() {
  $t = get_t();
  return array(
    'birt_width' => array(
      'field_name' => 'birt_width',
      'label'      => $t('The width of the BI report frame.'),
      'widget'     => array(
        'type'    => 'text_textfield',
      ),
    ),
    'birt_height' => array(
      'field_name'  => 'birt_height',
      'label' => $t('The height of the BI report frame.'),
      'type'        => 'text',
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
    ),
    'birt_reportfile' => array(
      'field_name' => 'birt_reportfile',
      'type' => 'file',
      'label' => 'BIRT Report File',
      'settings' => array(
        'description_field' => 0,
        'file_directory' => 'birt/files',
        'file_extensions' => 'rptdesign',
        'max_filesize' => '50MB',
        'user_register_form' => FALSE,
      ),
    ),
    'birt_tag' => array(
      'field_name' => 'birt_tag',
      'label' => $t('BI Report Tag'),
      'type' => 'taxonomy_term_reference',
      'widget' => array(
        'type' => 'taxonomy_autocomplete',
      ),
    ),
  );
}
