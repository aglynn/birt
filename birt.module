<?php

/**
 * @file
 * Our BIRT Open Source node type will allow users to specify a "reportname"
 */


/**
 * System settings form for BIRT.
 */
function birt_admin() {
  $form = array();

  $form['birt_render_method'] = array(
    '#type' => 'radios',
    '#options' => array(
      'birt_api' => t('BIRT API'),
      'iframe' => t('iFrame'),
    ),
    '#title' => 'BIRT Report Render Method: iFrame vs API',
    '#description' => t('Indicate whether you want your BIRT report to render using an iFrame or using the BIRT API.'),
    '#required' => TRUE,
    '#default_value' => variable_get('birt_render_method', ''),
  );

  $form['birt_server_address'] = array(
    '#type' => 'textfield',
    '#title' => t('BIRT Server Address'),
    '#default_value' => variable_get('birt_server_address', ''),
    '#size' => 30,
    '#maxlength' => 100,
    '#description' => t('Please type the URL of your BIRT server. For example, for http://127.0.0.1:8080/birt/ type in 127.0.0.1:8080/birt'),
    '#required' => TRUE,
  );

  $form['birt_javabridge_directory_address'] = array(
    '#type' => 'textfield',
    '#title' => t('JavaBridge Directory Address'),
    '#default_value' => variable_get('birt_javabridge_directory_address', ''),
    '#size' => 30,
    '#maxlength' => 100,
    '#description' => t('Please type the URL of your JavaBridge directory. For example, for http://127.0.0.1:8080/JavaBridge/ type in 127.0.0.1:8080/JavaBridge'),
    '#required' => FALSE,
    '#states' => array(
      // Only show this field when the checkbox is enabled.
      'visible' => array(
          ':input[name="birt_render_method"]' => array('value' => 'birt_api'),
      ),
    ),
  );

  $form['birt_javabridge_settings_file'] = array(
    '#states' => array(
      // Only show this field when the checkbox is enabled.
      'visible' => array(
        ':input[name="birt_render_method"]' => array('value' => 'birt_api'),
      ),
    ),
    '#title' => t('JavaBridge Settings File'),
    '#description' => t('Please upload the Java.inc file located within the JavaBridge/java/ directory.'),
    '#type' => 'file',
    '#default_value' => variable_get('birt_javabridge_settings_file', ''),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_permission().
 */

function birt_permission() {
  return array(
    'administer birt module' => array(
      'title' => t('Administer birt module'),
      'description' => t('Perform administration tasks for birt module.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function birt_menu() {
  $items = array();

  $items['admin/config/birt'] = array(
    'title' => 'BIRT settings',
    'description' => 'Settings for integrating BIRT reports into your site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('birt_admin'),
    'access arguments' => array('administer birt module'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function birt_theme($var) {
  $item['path'] = drupal_get_path('module', 'birt') . "/theme";
  $item['template'] = 'node--birt';
  return array("node__birt" => $item);
}


/**
 * Implements hook_preprocess_node().
 */
function birt_preprocess_node(&$vars) {

  if ($vars['type'] == 'birt' && $vars['page'] == TRUE) {

    $report_url = '';
    $report = '';
    $report_width = '';
    $report_height = '';

    $external_design = substr(url('/', array('absolute' => TRUE)), 0, -1) . variable_get('file_public_path', conf_path() . '/files') . '/birt/files/' . $vars['birt_reportfile'][0]['filename'];
    $birt_render_method = variable_get('birt_render_method');
    $vars['birt_render_method'] = $birt_render_method;

    if ($birt_render_method == 'birt_api'){
      drupal_add_css(drupal_get_path('module', 'birt') . '/theme/birt.css');

      $here = getcwd();

      // Call the Java.inc file that was uploaded in the BIRT module admin page.
      $java_inc_filepath = $here . '/' . variable_get('file_private_path', conf_path() . '/files') . '/Java.inc';

      $report_images_path = $here . '/' . variable_get('file_public_path', conf_path() . '/files') . '/birt/images/';
      $report_images_external = url('/', array('absolute' => TRUE)) . variable_get('file_public_path', conf_path() . '/files') . '/birt/images/';

      include_once($java_inc_filepath);

      // the report file to render
      $report_filepath = $here . '/' . variable_get('file_public_path', conf_path() . '/files') . '/birt/files/' . $vars['birt_reportfile'][0]['filename'];

      // load resources, .rpt files and images from the current working dir
      $ctx = java_context()->getServletContext();
      $birt_report_engine = java("org.eclipse.birt.php.birtengine.BirtEngine")->getBirtEngine($ctx);
      java_context()->onShutdown(java("org.eclipse.birt.php.birtengine.BirtEngine")->getShutdownHook());

      // Create a HTML render context
      $render_context = new java("org.eclipse.birt.report.engine.api.HTMLRenderContext");

 //     $ih = new java("org.eclipse.birt.report.engine.api.HTMLServerImageHandler");
 //     $render_context->setImageHandler($ih);

      $render_context->setBaseImageURL($report_images_path . session_id());
      $render_context->setImageDirectory($report_images_path . session_id());
      $context_map = new java("java.util.HashMap");
      $context = java("org.eclipse.birt.report.engine.api.EngineConstants")->APPCONTEXT_HTML_RENDER_CONTEXT;
      $context_map->put($context, $render_context);


      // Load the report design
      $design = $birt_report_engine->openReportDesign("${report_filepath}");
      $task = $birt_report_engine->createRunAndRenderTask($design);
      $task->setAppContext($context_map);

      // Add HTML render options
      $options = new java("org.eclipse.birt.report.engine.api.HTMLRenderOption");
      $options->setOutputFormat($options->OUTPUT_FORMAT_HTML);

      // Create the output
      $out = new java("java.io.ByteArrayOutputStream");
      $options->setOutputStream($out);
      $task->setRenderOption($options);
      $task->run();
      $task->close();

      // Return the generated output to the client
      $report = java_values($out);
    }

    // If using an iframe, set up iframe link and size of iframe.
    if ($birt_render_method == 'iframe'){
      $report_url = variable_get('birt_server_address') . '/frameset?__report=' . $external_design;

      if (!empty($vars['birt_height'])) {
        $report_height = $vars['birt_height'][0]['value'];
      }
      else {
        $report_height = '800px';
      }

      if (!empty($vars['birt_width'])) {
        $report_width = $vars['birt_width'][0]['value'];
      }
      else {
        $report_width = '100%';
      }
    }
    $vars['report'] = $report;
    $vars['report_width'] = $report_width;
    $vars['report_height'] = $report_height;
    $vars['report_url'] = $report_url;
  }
}
