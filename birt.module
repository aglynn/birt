<?php

/**
 * @file
 * Our BIRT Open Source node type will allow users to specify a "reportname"
 */


/**
 * System settings form for BIRT.
 */
function birt_admin() {
  $form = array();

  $form['birt_render_method'] = array(
    '#type' => 'radios',
    '#options' => array(
      'birt_api' => t('BIRT API'),
      'iframe' => t('iFrame'),
    ),
    '#title' => 'BIRT Report Render Method: iFrame vs API',
    '#description' => t('Indicate whether you want your BIRT report to render using an iFrame or using the BIRT API.'),
    '#required' => TRUE,
    '#default_value' => variable_get('birt_render_method', ''),
  );

  $form['birt_server_address'] = array(
    '#type' => 'textfield',
    '#title' => t('BIRT Server Address'),
    '#default_value' => variable_get('birt_server_address', ''),
    '#size' => 30,
    '#maxlength' => 100,
    '#description' => t('Please type the URL of your BIRT server. For example, for http://127.0.0.1:8080/birt/ type in 127.0.0.1:8080/birt'),
    '#required' => TRUE,
  );

  $form['birt_javabridge_directory_address'] = array(
    '#type' => 'textfield',
    '#title' => t('JavaBridge Directory Address'),
    '#default_value' => variable_get('birt_javabridge_directory_address', ''),
    '#size' => 30,
    '#maxlength' => 100,
    '#description' => t('Please type the URL of your JavaBridge directory. For example, for http://127.0.0.1:8080/JavaBridge/ type in 127.0.0.1:8080/JavaBridge'),
    '#required' => FALSE,
    '#states' => array(
      // Only show this field when the checkbox is enabled.
      'visible' => array(
          ':input[name="birt_render_method"]' => array('value' => 'birt_api'),
      ),
    ),
  );

  $form['birt_javabridge_settings_file'] = array(
    '#title' => 'Upload',
    '#title' => t('JavaBridge Settings File'),
    '#description' => t('Please upload the Java.inc file located within the JavaBridge/java/ directory.'),
    '#type' => 'file',
    '#default_value' => variable_get('birt_javabridge_settings_file', ''),
    '#states' => array(
      // Only show this field when the checkbox is enabled.
      'visible' => array(
          ':input[name="birt_render_method"]' => array('value' => 'birt_api'),
      ),
    ),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_permission().
 */

function birt_permission() {
  return array(
    'administer birt module' => array(
      'title' => t('Administer birt module'),
      'description' => t('Perform administration tasks for birt module.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function birt_menu() {
  $items = array();

  $items['admin/config/birt'] = array(
    'title' => 'BIRT settings',
    'description' => 'Settings for integrating BIRT reports into your site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('birt_admin'),
    'access arguments' => array('administer birt module'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function birt_theme($var) {
  $item['path'] = drupal_get_path('module', 'birt') . "/theme";
  $item['template'] = 'node--birt';
  return array("node__birt" => $item);
}


/**
 * Implements hook_preprocess_node().
 */
function birt_preprocess_node(&$vars) {

  if ($vars['type'] == 'birt' && $vars['page'] == TRUE) {
    $fileloc = 'private://birt/files/' . $vars['birt_reportfile'][0]['filename'];
    $vars['fileloc'] = $fileloc;
    $external_design = substr(url('/', array('absolute' => TRUE)), 0, -1) . variable_get('file_public_path', conf_path() . '/files') . '/birt/files/' . $vars['birt_reportfile'][0]['filename'];

    if (variable_get('birt_render_method') == 'birt_api'){
      if (variable_get('birt_javabridge_settings_file')) {
        include_once $javabridge_file;
        $vars['javabridge_file'] = $javabridge_file;
        drupal_add_css(drupal_get_path('module', 'birt') . '/theme/birt.css');

        $file_path = 'private://birt/files/' . $vars['birt_reportfile'][0]['filename'];

        // Create the birtgraphics directory in the public folder.
    //    drupal_mkdir("public://birtgraphics", NULL, TRUE);

    //    $birtgraphics_public_path = 'public://birtgraphics/';
    //    file_unmanaged_copy($file_path, $birtgraphics_public_path, FILE_EXISTS_REPLACE);
    //    variable_set('birtgraphics_public_folder', $birtgraphics_public_path);



        // Format the URL for the BIRT server.
        $external_design = substr(url('/', array('absolute' => TRUE)), 0, -1);
        $external_design .= variable_get('file_public_path', conf_path() . '/files');
        $external_design .= '/birt/' . $vars['birt_reportfile'][0]['filename'];
        $vars['external_design'] = $external_design;
        variable_set('birt_public_folder', $birt_public_path);

        // JavaBridge code starts here.
        $image_url_prefix = substr(url('/', array('absolute' => TRUE)), 0, -1) . variable_get('file_public_path', conf_path() . '/files') . '/birtgraphics/';

        $birtgraphics_path = variable_get('file_public_path', conf_path() . '/files') . '/birtgraphics/';

        include_once 'public://birt/files/java.inc';


        try {

          $ctx = java_context()->getServletContext();
          $birt_report_engine = java("org.eclipse.birt.php.birtengine.BirtEngine")->getBirtEngine($ctx);
          java_context()->onShutdown(java("org.eclipse.birt.php.birtengine.BirtEngine")->getShutdownHook());

          // Pass the .rptdesign file to the JavaBridge to be interpreted by BIRT.
          $report = $birt_report_engine->openReportDesign($external_design);
          $task = $birt_report_engine->createRunAndRenderTask($report);

          $task_options = new java("org.eclipse.birt.report.engine.api.HTMLRenderOption");
          $output_stream = new java("java.io.ByteArrayOutputStream");
          $task_options->setOutputStream($output_stream);
          $task_options->setOutputFormat("html");
          $ih = new java("org.eclipse.birt.report.engine.api.HTMLServerImageHandler");
          $task_options->setImageHandler($ih);

          $task_options->setBaseImageURL($image_url_prefix . session_id());
          $task_options->setImageDirectory($birtgraphics_path . session_id());

          $task->setRenderOption($task_options);
          $task->run();
          $task->close();

        } catch (JavaException $e) {
          watchdog('BIRT', $e);
        }

        // Return the generated output to the client.
        $report .= java_values($output_stream);

        $vars['report'] = $report;
      }
    }

    // If using an iframe, set up iframe link and size of iframe.
    if (variable_get('birt_render_method') == 'iframe'){
      $report_url = variable_get('birt_server_address') . '/frameset?__report=' . $external_design;
      $vars['report_url'] = $report_url;

      if (!empty($vars['birt_height'])) {
        $vars['report_height'] = $vars['birt_height'][0]['value'];
      }
      else {
        $vars['report_height'] = '800px';
      }

      if (!empty($vars['birt_width'])) {
        $vars['report_width'] = $vars['birt_width'][0]['value'];
      }
      else {
        $vars['report_width'] = '100%';
      }
    }
  }
}
