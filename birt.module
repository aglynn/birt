<?php

/**
 * @file
 * Our BIRT node type will allow users to specify a "reportname"
 */


/**
 * System settings form for BIRT.
 */
function birt_admin() {
  $form = array();

  $form['birt_server_address'] = array(
    '#type' => 'textfield',
    '#title' => t('BIRT Server Address'),
    '#default_value' => variable_get('birt_server_address', ''),
    '#size' => 30,
    '#maxlength' => 100,
    '#description' => t('Please type the URL of your BIRT server. For example, for http://127.0.0.1:8080/birt/ type in 127.0.0.1:8080/birt'),
    '#required' => TRUE,
  );

  $form['birt_javabridge_directory_address'] = array(
    '#type' => 'textfield',
    '#title' => t('JavaBridge Directory Address'),
    '#default_value' => variable_get('birt_javabridge_directory_address', ''),
    '#size' => 30,
    '#maxlength' => 100,
    '#description' => t('Please type the URL of your JavaBridge directory. For example, for http://127.0.0.1:8080/JavaBridge/ type in 127.0.0.1:8080/JavaBridge'),
    '#required' => TRUE,
    '#states' => array(
      // Only show this field when the checkbox is enabled.
      'visible' => array(
          ':input[name="birt_render_method"]' => array('value' => 'birt_api'),
      ),
    ),
  );

  $form['birt_javabridge_settings_file'] = array(
    '#title' => t('JavaBridge Settings File - You Only Need to Upload This One Time'),
    '#description' => t('Please upload the Java.inc file located within the JavaBridge/java/ directory.
        For local development, this file often at such as http://127.0.0.1:8080/JavaBridge/java/Java.inc.
        Make sure that none of the constants before the first function are uncommented.
        In other words, be sure they have # at the beginning of the line).
        I will use the BIRT server address, which you specified at the top of this page, minus the /birt/ as the Java address.'),
    '#type' => 'file',
    '#default_value' => variable_get('birt_javabridge_settings_file', ''),
  );

  $form['#validate'][] = '_birt_admin_validate';
  $form['#submit'][] = '_birt_admin_settings_submit';

  return system_settings_form($form);
}

function _birt_admin_validate($form, &$form_state) {
  $file = file_save_upload('birt_javabridge_settings_file', array(
      'file_validate_extensions' => array('inc'), // Validate extensions.
  ));
  // If the file passed validation:
  if ($file) {
    $birt_dir = 'private://birt';
    // Check if the private://birt directory exists. Create it if it doesn't.
    file_prepare_directory($birt_dir, FILE_CREATE_DIRECTORY);

    // Move the file, into the Drupal file system
    if ($file = file_move($file, 'private://birt/', FILE_EXISTS_REPLACE)) {
      // Save the file for use in the submit handler.
      $form_state['storage']['file'] = $file;
    }
    else {
      form_set_error('file', t('Failed to write the uploaded file the site\'s file folder.'));
    }
  }
  else {
    form_set_error('file', t('No file was uploaded.'));
  }
}

/**
 * Edits the Java.inc file, which converts PHP commands to Java and which needs the path to Java.
 * Here we will have that file pull the path set in the BIRT configuration page.
 */
function _birt_admin_settings_submit($form, &$form_state) {
  $birt_java_location = variable_get('birt_java_location');
  if ($birt_java_location == NULL) {
    variable_set('birt_java_location', substr(variable_get('birt_server_address'), 0, -5));
  }

  $here = getcwd();
  $java_inc_filepath = $here . '/' . variable_get('file_private_path', conf_path() . '/files') . '/birt/Java.inc';
  if(!file_exists($java_inc_filepath)){
    drupal_set_message(t("Warning: The Java.inc file can't be found, which will prevent BIRT reports from working in Drupal.
        You probably haven't set up your private files directory. You can do so at /admin/config/media/file-system."), 'error');
    return;
  }

  $file_contents = file_get_contents($java_inc_filepath);
  $file_contents = str_replace('# define ("JAVA_HOSTS", "127.0.0.1:8787");','define ("JAVA_HOSTS", variable_get("birt_java_location"));',$file_contents);
//  $file_contents = str_replace('#','',$file_contents);

  file_put_contents($java_inc_filepath,$file_contents);
}

/**
 * Implements hook_permission().
 */

function birt_permission() {
  return array(
    'administer birt module' => array(
      'title' => t('Administer birt module'),
      'description' => t('Perform administration tasks for birt module.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function birt_menu() {
  $items = array();

  $items['admin/config/birt'] = array(
    'title' => 'BIRT settings',
    'description' => 'Settings for integrating BIRT reports into your site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('birt_admin'),
    'access arguments' => array('administer birt module'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function birt_theme($var) {
  $item['path'] = drupal_get_path('module', 'birt') . "/theme";
  $item['template'] = 'node--birt';
  return array("node__birt" => $item);
}


/**
 * Implements hook_preprocess_node().
 */
function birt_preprocess_node(&$vars) {

  if ($vars['type'] == 'birt' && $vars['page'] == TRUE) {

    $report_url = '';
    $report = '';

    drupal_add_css(drupal_get_path('module', 'birt') . '/theme/birt.css');

    $here = getcwd();

    // Call the Java.inc file that was uploaded in the BIRT module admin page.
    $java_inc_filepath = $here . '/' . variable_get('file_private_path', conf_path() . '/files') . '/birt/Java.inc';

    $report_images_path = $here . '/' . variable_get('file_public_path', conf_path() . '/files') . '/birt/images/';

    // TODO: Define the java.inc variable here so users don't have to.
    include_once($java_inc_filepath);

    // the report file to render
    $report_filepath = $here . '/' . variable_get('file_public_path', conf_path() . '/files') . '/birt/files/' . $vars['birt_reportfile'][0]['filename'];

    // load resources, .rpt files and images from the current working dir
    $ctx = java_context()->getServletContext();
    $birt_report_engine = java("org.eclipse.birt.php.birtengine.BirtEngine")->getBirtEngine($ctx);
    java_context()->onShutdown(java("org.eclipse.birt.php.birtengine.BirtEngine")->getShutdownHook());

    // Create a HTML render context
    $render_context = new java("org.eclipse.birt.report.engine.api.HTMLRenderContext");

    $render_context->setBaseImageURL($report_images_path . session_id());
    $render_context->setImageDirectory($report_images_path . session_id());
    $context_map = new java("java.util.HashMap");
    $context = java("org.eclipse.birt.report.engine.api.EngineConstants")->APPCONTEXT_HTML_RENDER_CONTEXT;
    $context_map->put($context, $render_context);

    // Load the report design
    $design = $birt_report_engine->openReportDesign("${report_filepath}");
    $task = $birt_report_engine->createRunAndRenderTask($design);
    $task->setAppContext($context_map);

    // Add HTML render options
    $options = new java("org.eclipse.birt.report.engine.api.HTMLRenderOption");
    $options->setOutputFormat($options->OUTPUT_FORMAT_HTML);

    // Create the output
    $out = new java("java.io.ByteArrayOutputStream");
    $options->setOutputStream($out);
    $task->setRenderOption($options);
    $task->run();
    $task->close();

    // Return the generated output to the client
    $report_html = java_values($out);

    // Fix the broken images.
    $report = str_replace('file:' . $here, '', $report_html);

    // TODO: Add cron function to clean out images.

    $vars['report'] = $report;
  }
}
